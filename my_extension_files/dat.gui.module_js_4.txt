t[ 3 ].toString() + test[ 3 ].toString(), 0 )
					};

				},
				write: colorToString
			},
			SIX_CHAR_HEX: {
				read: function read( original ) {

					var test = original.match( /^#([A-F0-9]{6})$/i );
					if ( test === null ) {

						return false;

					}
					return {
						space: 'HEX',
						hex: parseInt( '0x' + test[ 1 ].toString(), 0 )
					};

				},
				write: colorToString
			},
			CSS_RGB: {
				read: function read( original ) {

					var test = original.match( /^rgb\(\s*(.+)\s*,\s*(.+)\s*,\s*(.+)\s*\)/ );
					if ( test === null ) {

						return false;

					}
					return {
						space: 'RGB',
						r: parseFloat( test[ 1 ] ),
						g: parseFloat( test[ 2 ] ),
						b: parseFloat( test[ 3 ] )
					};

				},
				write: colorToString
			},
			CSS_RGBA: {
				read: function read( original ) {

					var test = original.match( /^rgba\(\s*(.+)\s*,\s*(.+)\s*,\s*(.+)\s*,\s*(.+)\s*\)/ );
					if ( test === null ) {

						return false;

					}
					return {
						space: 'RGB',
						r: parseFloat( test[ 1 ] ),
						g: parseFloat( test[ 2 ] ),
						b: parseFloat( test[ 3 ] ),
						a: parseFloat( test[ 4 ] )
					};

				},
				write: colorToString
			}
		}
	},
	{
		litmus: Common.isNumber,
		conversions: {
			HEX: {
				read: function read( original ) {

					return {
						space: 'HEX',
						hex: original,
						conversionName: 'HEX'
					};

				},
				write: function write( color ) {

					return color.hex;

				}
			}
		}
	},
	{
		litmus: Common.isArray,
		conversions: {
			RGB_ARRAY: {
				read: function read( original ) {

					if ( original.length !== 3 ) {

						return false;

					}
					return {
						space: 'RGB',
						r: original[ 0 ],
						g: original[ 1 ],
						b: original[ 2 ]
					};

				},
				write: function write( color ) {

					return [ color.r, color.g, color.b ];

				}
			},
			RGBA_ARRAY: {
				read: function read