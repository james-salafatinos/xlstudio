function onMouseUp() {

			dom.unbind( window, 'mousemove', onMouseDrag );
			dom.unbind( window, 'mouseup', onMouseUp );
			onFinish();

		}
		function onMouseDown( e ) {

			dom.bind( window, 'mousemove', onMouseDrag );
			dom.bind( window, 'mouseup', onMouseUp );
			prevY = e.clientY;

		}
		_this2.__input = document.createElement( 'input' );
		_this2.__input.setAttribute( 'type', 'text' );
		dom.bind( _this2.__input, 'change', onChange );
		dom.bind( _this2.__input, 'blur', onBlur );
		dom.bind( _this2.__input, 'mousedown', onMouseDown );
		dom.bind( _this2.__input, 'keydown', function ( e ) {

			if ( e.keyCode === 13 ) {

				_this.__truncationSuspended = true;
				this.blur();
				_this.__truncationSuspended = false;
				onFinish();

			}

		} );
		_this2.updateDisplay();
		_this2.domElement.appendChild( _this2.__input );
		return _this2;

	}
	createClass( NumberControllerBox, [ {
		key: 'updateDisplay',
		value: function updateDisplay() {

			this.__input.value = this.__truncationSuspended ? this.getValue() : roundToDecimal( this.getValue(), this.__precision );
			return get( NumberControllerBox.prototype.__proto__ || Object.getPrototypeOf( NumberControllerBox.prototype ), 'updateDisplay', this ).call( this );

		}
	} ] );
	return NumberControllerBox;

}( NumberController );

function map( v, i1, i2, o1, o2 ) {

	return o1 + ( o2 - o1 ) * ( ( v - i1 ) / ( i2 - i1 ) );

}
var NumberControllerSlider = function ( _NumberController ) {

	inherits( NumberControllerSlider, _NumberController );
	function NumberControllerSlider( object, property, min, max, step ) {

		classCallCheck( this, NumberControllerSlider );
		var _this2 = possibleConstructorReturn( this, ( NumberControllerSlider.__proto__ || Object.getPrototypeOf( NumberControllerSlider ) ).call( this, object, property, { min: min, max: max, step: step } ) );
		var _this = _this2;
		_this2.__background = document.createElement( 'div' );
		_this2.