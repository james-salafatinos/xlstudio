rix.setPosition( _position );
					_matrix.scale( _scale );

					_matrix.elements[ 3 ] = 0;
					_matrix.elements[ 7 ] = 0;
					_matrix.elements[ 11 ] = 0;
					_matrix.elements[ 15 ] = 1;

					style = getObjectCSSMatrix( _matrix );

				} else {

					style = getObjectCSSMatrix( object.matrixWorld );

				}

				const element = object.element;
				const cachedObject = cache.objects.get( object );

				if ( cachedObject === undefined || cachedObject.style !== style ) {

					element.style.transform = style;

					const objectData = { style: style };
					cache.objects.set( object, objectData );

				}

				element.style.display = object.visible ? '' : 'none';

				if ( element.parentNode !== cameraElement ) {

					cameraElement.appendChild( element );

				}

				object.onAfterRender( _this, scene, camera );

			}

			for ( let i = 0, l = object.children.length; i < l; i ++ ) {

				renderObject( object.children[ i ], scene, camera, cameraCSSMatrix );

			}

		}

	}

}

export { CSS3DObject, CSS3DSprite, CSS3DRenderer };
