function saveAs( presetName ) {

			if ( ! this.load.remembered ) {

				this.load.remembered = {};
				this.load.remembered[ DEFAULT_DEFAULT_PRESET_NAME ] = getCurrentPreset( this, true );

			}
			this.load.remembered[ presetName ] = getCurrentPreset( this );
			this.preset = presetName;
			addPresetOption( this, presetName, true );
			this.saveToLocalStorageIfPossible();

		},
		revert: function revert( gui ) {

			Common.each( this.__controllers, function ( controller ) {

				if ( ! this.getRoot().load.remembered ) {

					controller.setValue( controller.initialValue );

				} else {

					recallSavedValue( gui || this.getRoot(), controller );

				}
				if ( controller.__onFinishChange ) {

					controller.__onFinishChange.call( controller, controller.getValue() );

				}

			}, this );
			Common.each( this.__folders, function ( folder ) {

				folder.revert( folder );

			} );
			if ( ! gui ) {

				markPresetModified( this.getRoot(), false );

			}

		},
		listen: function listen( controller ) {

			var init = this.__listening.length === 0;
			this.__listening.push( controller );
			if ( init ) {

				updateDisplays( this.__listening );

			}

		},
		updateDisplay: function updateDisplay() {

			Common.each( this.__controllers, function ( controller ) {

				controller.updateDisplay();

			} );
			Common.each( this.__folders, function ( folder ) {

				folder.updateDisplay();

			} );

		}
	} );
function addRow( gui, newDom, liBefore ) {

	var li = document.createElement( 'li' );
	if ( newDom ) {

		li.appendChild( newDom );

	}
	if ( liBefore ) {

		gui.__ul.insertBefore( li, liBefore );

	} else {

		gui.__ul.appendChild( li );

	}
	gui.onResize();
	return li;

}
function removeListeners( gui ) {

	dom.unbind( window, 'resize', gui.__resizeHandler );
	if ( gui.saveToLocalStorageIfPossible ) {

		dom.unbind( window, 'unload', gui.saveToLocalStorageIfPossible );